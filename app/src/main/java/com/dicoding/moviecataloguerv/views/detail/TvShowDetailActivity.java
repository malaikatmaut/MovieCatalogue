package com.dicoding.moviecataloguerv.views.detail;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.ActivityNavigator;import androidx.recyclerview.widget.LinearLayoutManager;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.dicoding.moviecataloguerv.BuildConfig;import com.dicoding.moviecataloguerv.R;import com.dicoding.moviecataloguerv.adapter.BackdropSlideAdapter;import com.dicoding.moviecataloguerv.adapter.CastAdapter;import com.dicoding.moviecataloguerv.adapter.SimilarAdapter;import com.dicoding.moviecataloguerv.data.source.model.Cast;import com.dicoding.moviecataloguerv.data.source.model.ContentRating;import com.dicoding.moviecataloguerv.data.source.model.ImageItems;import com.dicoding.moviecataloguerv.data.source.model.Season;import com.dicoding.moviecataloguerv.data.source.model.Similar;import com.dicoding.moviecataloguerv.data.source.model.TvShow;import com.dicoding.moviecataloguerv.data.source.model.Video;import com.dicoding.moviecataloguerv.data.source.remote.response.VideosResponse;import com.dicoding.moviecataloguerv.databinding.ActivityTvDetailBinding;import com.dicoding.moviecataloguerv.utils.BaseAppCompatActivity;import com.dicoding.moviecataloguerv.utils.StringUtils;import com.dicoding.moviecataloguerv.viewmodel.TvShowDetailViewModel;import com.dicoding.moviecataloguerv.viewmodel.ViewModelFactory;import com.google.android.material.appbar.AppBarLayout;import com.google.android.material.snackbar.Snackbar;import com.smarteist.autoimageslider.SliderAnimations;import java.util.ArrayList;import java.util.List;import java.util.Locale;import java.util.Objects;import static com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;public class TvShowDetailActivity extends BaseAppCompatActivity {    private ActivityTvDetailBinding binding;    private TvShowDetailViewModel viewModel;    public static final String TV_SHOW_ID = "tv_id";    public int tvShowId;    private TvShow tvShow;    private boolean favorite;    private String msg;    private CastAdapter castAdapter;    private SimilarAdapter similarAdapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        binding = ActivityTvDetailBinding.inflate(getLayoutInflater());        setContentView(binding.getRoot());        tvShowId = TvShowDetailActivityArgs.fromBundle(Objects.requireNonNull(getIntent().getExtras())).getTvId();        showLoading(true);        setupToolbar();        binding.castRv.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));        castAdapter = new CastAdapter(new ArrayList<>());        binding.castRv.setAdapter(castAdapter);        binding.similarRv.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));        similarAdapter = new SimilarAdapter(new ArrayList<>(), "tv", onItemClicked);        binding.similarRv.setAdapter(similarAdapter);        viewModel = obtainViewModel(this);        observeData();    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.details_menu, menu);        super.onCreateOptionsMenu(menu);        return true;    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        if (favorite) {            menu.findItem(R.id.favorite).setIcon(R.drawable.ic_favorite);        } else {            menu.findItem(R.id.favorite).setIcon(R.drawable.ic_favorite_border);        }        super.onPrepareOptionsMenu(menu);        return true;    }    @Override    public boolean onOptionsItemSelected(@NonNull MenuItem item) {        if (item.getItemId() == R.id.favorite) {            if (viewModel.getFavTv(tvShowId) == null) {                addFavorite(item);            } else {                deleteFavorite(item);            }        }        return super.onOptionsItemSelected(item);    }    @Override    public boolean onSupportNavigateUp() {        onBackPressed();        return true;    }    private void setupToolbar() {        setSupportActionBar(binding.toolbarDetail);        if (getSupportActionBar() != null) {            getSupportActionBar().setDisplayHomeAsUpEnabled(true);            getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_back_dark);        }        binding.appBar.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener() {            boolean isShow = true;            int scrollRange = -1;            @Override            public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {                if (scrollRange == -1) {                    scrollRange = appBarLayout.getTotalScrollRange();                }                if (scrollRange + verticalOffset == 0) {                    binding.collapsingToolbar.setTitle(tvShow.getTitle());                    binding.cardBanner.setVisibility(View.GONE);                    isShow = true;                } else if (isShow) {                    binding.collapsingToolbar.setTitle(" ");                    binding.cardBanner.setVisibility(View.VISIBLE);                    isShow = false;                }            }        });    }    @NonNull    private static TvShowDetailViewModel obtainViewModel(AppCompatActivity activity) {        ViewModelFactory factory = ViewModelFactory.getInstance(activity.getApplication());        return new ViewModelProvider(activity, factory).get(TvShowDetailViewModel.class);    }    private void observeData() {        viewModel.getTvDetail(tvShowId).observe(this, tvDetail -> {            if (tvDetail != null) {                this.tvShow = tvDetail;                setShowDetail();                setContentRating(tvDetail.getContentRatingResponse().getResults());                setBackdropsSlider(tvDetail.getImages().getBackdrops());                setShowVideos(tvDetail.getVideos());                setSeasons(tvDetail.getSeasons());                setCastList(tvDetail.getCredits().getCast());                setSimilarList(tvDetail.getSimilar().getSimilar());                if (viewModel.getFavTv(tvShowId) != null) {                    favorite = true;                    invalidateOptionsMenu();                }                showLoading(false);            }        });    }    private void setShowDetail() {        if (this.tvShow == null) {            showError();        } else {            binding.tvDetailsTitle.setText(this.tvShow.getTitle());            binding.tvDetailsOverview.setText(this.tvShow.getOverview());            binding.ratingText.setText(String.valueOf(this.tvShow.getRating()));            binding.ratingCount.setText(String.format(Locale.US, "%,d", this.tvShow.getRatingVotes()));            binding.tvDetailsGenres.setText(StringUtils.getGenres(this.tvShow.getGenres()));            binding.tvDetailsReleaseDate.setText(this.tvShow.getReleaseDate());            Glide.with(this)                    .load(BuildConfig.TMDB_IMAGE_342 + this.tvShow.getPosterPath())                    .error(R.drawable.ic_undraw_404)                    .apply(RequestOptions.placeholderOf(R.drawable.ic_undraw_images).centerCrop())                    .transition(withCrossFade())                    .into(binding.tvDetailsPoster);        }    }    private void setContentRating(List<ContentRating> results) {        ContentRating contentRating = results.get(0);        binding.tvContentRating.setText(contentRating.getRating());    }    private void setBackdropsSlider(List<ImageItems> imageItems) {        binding.imageSlider.setSliderAdapter(new BackdropSlideAdapter(imageItems));        binding.imageSlider.setSliderTransformAnimation(SliderAnimations.FADETRANSFORMATION);        binding.imageSlider.setIndicatorVisibility(false);    }    private void setShowVideos(VideosResponse videosResponse) {        binding.tvTrailers.removeAllViews();        if (videosResponse != null) {            if (videosResponse.getVideos().size() == 0) {                binding.trailersLabel.setVisibility(View.GONE);                binding.tvTrailers.setVisibility(View.GONE);            } else {                for (final Video video : videosResponse.getVideos()) {                    View parent = getLayoutInflater().inflate(R.layout.item_trailer, binding.tvTrailers, false);                    ImageView thumbnail = parent.findViewById(R.id.thumbnail_trailer);                    TextView tvTrailerTitle = parent.findViewById(R.id.trailerTitle);                    tvTrailerTitle.setText(video.getName());                    Glide.with(this)                            .load(String.format(BuildConfig.YOUTUBE_THUMBNAIL_URL, video.getKey()))                            .error(R.drawable.ic_undraw_404)                            .apply(RequestOptions.placeholderOf(R.color.colorPrimary).centerCrop())                            .into(thumbnail);                    thumbnail.requestLayout();                    thumbnail.setOnClickListener(v -> startActivity(                            new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(BuildConfig.YOUTUBE_VIDEO_URL, video.getKey())))                    ));                    binding.tvTrailers.addView(parent);                }            }        } else {            showError();            binding.trailersLabel.setVisibility(View.GONE);            binding.tvTrailers.setVisibility(View.GONE);        }    }    private void setSeasons(List<Season> seasonList) {        binding.tvSeasons.removeAllViews();        for (final Season season : seasonList) {            View parent = getLayoutInflater().inflate(R.layout.item_season, binding.tvSeasons, false);            ImageView imageSeason = parent.findViewById(R.id.season_poster);            TextView seasonTitle = parent.findViewById(R.id.season_name);            seasonTitle.setText(season.getName());            imageSeason.requestLayout();            imageSeason.setOnClickListener(v -> {                Intent intent = new Intent(TvShowDetailActivity.this, SeasonsActivity.class);                intent.putExtra(SeasonsActivity.TV_SHOW_ID, tvShowId);                intent.putExtra(SeasonsActivity.SEASON_NUMBER, season.getSeasonNumber());                startActivity(intent);            });            Glide.with(this)                    .load(BuildConfig.TMDB_IMAGE_BASE_URL + season.getPosterPath())                    .error(R.drawable.ic_undraw_404)                    .apply(RequestOptions.placeholderOf(R.drawable.ic_undraw_images).centerCrop())                    .into(imageSeason);            binding.tvSeasons.addView(parent);        }    }    private void setCastList(List<Cast> castList) {        if (castList.size() != 0) {            castAdapter.setCastList(castList);        } else {            binding.castLabel.setVisibility(View.GONE);            binding.castRv.setVisibility(View.GONE);        }    }    private void setSimilarList(List<Similar> similarList) {        if (similarList.size() != 0) {            similarAdapter.setSimilarList(similarList);        } else {            binding.similarLabel.setVisibility(View.GONE);            binding.similarRv.setVisibility(View.GONE);        }    }    private SimilarAdapter.OnItemClicked onItemClicked = id -> {        ActivityNavigator activityNavigator = new ActivityNavigator(this);        Intent intent = new Intent(this, TvShowDetailActivity.class);        intent.putExtra(TvShowDetailActivity.TV_SHOW_ID, id);        activityNavigator.navigate(activityNavigator.createDestination().setIntent(intent), null, null, null);    };    private void showLoading(Boolean state) {        if (state) {            binding.backgroundLoading.setVisibility(View.VISIBLE);            binding.progressBar.setVisibility(View.VISIBLE);            binding.appBar.setVisibility(View.GONE);            binding.constraint.setVisibility(View.GONE);        } else {            binding.backgroundLoading.setVisibility(View.GONE);            binding.progressBar.setVisibility(View.GONE);            binding.appBar.setVisibility(View.VISIBLE);            binding.constraint.setVisibility(View.VISIBLE);        }    }    private void showError() {        Toast.makeText(this, "Check your internet connection.", Toast.LENGTH_SHORT).show();    }    private void addFavorite(final MenuItem item) {        viewModel.insertFavTv(tvShow);        favorite = true;        item.setIcon(R.drawable.ic_favorite);        msg = tvShow.getTitle() + " " + getString(R.string.add_favorite_tv);        Snackbar snackbar = Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_LONG)                .setAction(R.string.undo, view -> {                    deleteFavorite(item);                    msg = tvShow.getTitle() + " " + getString(R.string.delete_favorite_tv);                    Snackbar snackbarUndo = Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_SHORT)                            .setTextColor(getResources().getColor(R.color.colorPrimary))                            .setBackgroundTint(getResources().getColor(R.color.colorWhite))                            .setActionTextColor(getResources().getColor(R.color.colorPrimaryLight));                    snackbarUndo.show();                })                .setTextColor(getResources().getColor(R.color.colorPrimary))                .setBackgroundTint(getResources().getColor(R.color.colorWhite))                .setActionTextColor(getResources().getColor(R.color.colorPrimaryLight));        snackbar.show();    }    private void deleteFavorite(final MenuItem item) {        viewModel.deleteFavTv(tvShow);        favorite = false;        item.setIcon(R.drawable.ic_favorite_border);        msg = tvShow.getTitle() + " " + getString(R.string.delete_favorite_tv);        Snackbar snackbar = Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_LONG)                .setAction(R.string.undo, view -> {                    addFavorite(item);                    msg = tvShow.getTitle() + " " + getString(R.string.add_favorite_tv);                    Snackbar snackbarUndo = Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_SHORT)                            .setTextColor(getResources().getColor(R.color.colorPrimary))                            .setBackgroundTint(getResources().getColor(R.color.colorWhite))                            .setActionTextColor(getResources().getColor(R.color.colorPrimaryLight));                    snackbarUndo.show();                })                .setTextColor(getResources().getColor(R.color.colorPrimary))                .setBackgroundTint(getResources().getColor(R.color.colorWhite))                .setActionTextColor(getResources().getColor(R.color.colorPrimaryLight));        snackbar.show();    }}