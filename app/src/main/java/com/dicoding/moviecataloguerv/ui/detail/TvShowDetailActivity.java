package com.dicoding.moviecataloguerv.ui.detail;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RatingBar;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.widget.Toolbar;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.coordinatorlayout.widget.CoordinatorLayout;import androidx.lifecycle.ViewModelProvider;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.dicoding.moviecataloguerv.BuildConfig;import com.dicoding.moviecataloguerv.R;import com.dicoding.moviecataloguerv.adapter.BackdropSlideAdapter;import com.dicoding.moviecataloguerv.model.Cast;import com.dicoding.moviecataloguerv.model.CreditsResponse;import com.dicoding.moviecataloguerv.model.Genre;import com.dicoding.moviecataloguerv.model.GenresResponse;import com.dicoding.moviecataloguerv.model.ImageItems;import com.dicoding.moviecataloguerv.model.Season;import com.dicoding.moviecataloguerv.model.Similar;import com.dicoding.moviecataloguerv.model.SimilarResponse;import com.dicoding.moviecataloguerv.model.Trailer;import com.dicoding.moviecataloguerv.model.TrailerResponse;import com.dicoding.moviecataloguerv.model.TvShow;import com.dicoding.moviecataloguerv.utils.BaseAppCompatActivity;import com.dicoding.moviecataloguerv.viewmodel.FavoritesViewModel;import com.dicoding.moviecataloguerv.viewmodel.TvShowDetailViewModel;import com.google.android.material.appbar.AppBarLayout;import com.google.android.material.appbar.CollapsingToolbarLayout;import com.google.android.material.snackbar.Snackbar;import com.smarteist.autoimageslider.IndicatorAnimations;import com.smarteist.autoimageslider.SliderAnimations;import com.smarteist.autoimageslider.SliderView;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;public class TvShowDetailActivity extends BaseAppCompatActivity {    public static String TV_SHOW_ID = "tvShow_id";    private TvShowDetailViewModel tvShowsViewModel;    private FavoritesViewModel favoritesViewModel;    private ImageView tvShowPoster;    private TextView tvShowTitle;    private TextView tvShowGenres;    private TextView tvShowOverview;    private TextView tvShowReleaseDate;    private RatingBar tvShowRating;    private LinearLayout tvShowTrailers;    private LinearLayout tvShowSeasons;    private LinearLayout tvShowCasts;    private LinearLayout tvShowSimilar;    private ProgressBar progressBar;    private ImageView backgroundLoading;    private AppBarLayout appBarLayout;    private ConstraintLayout constraintLayout;    private TextView tvShowTrailerLabel;    private TextView tvShowCastLabel;    private TextView tvShowSimilarLabel;    private TextView ratingText;    private TextView ratingVotes;    private CoordinatorLayout coordinatorLayout;    private SliderView sliderView;    public int tvShowId;    private TvShow tvShow;    private boolean favorite;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        makeStatusBarTransparent();        setContentView(R.layout.activity_tv_detail);        setupToolbar();        initUI();        showLoading(true);        tvShowId = getIntent().getIntExtra(TV_SHOW_ID, tvShowId);        Log.d(getLocalClassName(), String.valueOf(tvShowId));        tvShowsViewModel = new ViewModelProvider(this, new ViewModelProvider.NewInstanceFactory()).get(TvShowDetailViewModel.class);        favoritesViewModel = new ViewModelProvider(this, new ViewModelProvider.AndroidViewModelFactory(this.getApplication())).get(FavoritesViewModel.class);        observeData();    }    private void observeData() {        tvShowsViewModel.getTvShowItems(tvShowId).observe(this, items -> {            if (items != null) {                setTvShow();                setSeasons();                setupBackdrops(items.getImageResponse().getBackdrops());                if (favoritesViewModel.selectFavTv(tvShowId) != null) {                    favorite = true;                    invalidateOptionsMenu();                }            }        });        tvShowsViewModel.getGenres().observe(this, genresResponse -> {            if (genresResponse != null) {                setGenres();            }        });        tvShowsViewModel.getTrailers(tvShowId).observe(this, trailerResponse -> {            if (trailerResponse != null) {                setTrailers();            }        });        tvShowsViewModel.getSimilar(tvShowId).observe(this, similarResponse -> {            if (similarResponse != null) {                setSimilar();                showLoading(false);            }        });        tvShowsViewModel.getCredits(tvShowId).observe(this, creditsResponse -> {            if (creditsResponse != null) {                setCasts();            }        });        Log.d("TvShowDetail", "Loaded");    }    private void setupBackdrops(List<ImageItems> imageItems) {        BackdropSlideAdapter slideAdapter = new BackdropSlideAdapter(imageItems);        sliderView.setSliderAdapter(slideAdapter);        sliderView.setIndicatorAnimation(IndicatorAnimations.THIN_WORM);        sliderView.setSliderTransformAnimation(SliderAnimations.FADETRANSFORMATION);        sliderView.setOnIndicatorClickListener(position -> sliderView.setCurrentPagePosition(position));    }    private void setupToolbar() {        Toolbar toolbar = findViewById(R.id.toolbar_detail);        setSupportActionBar(toolbar);        if (getSupportActionBar() != null) {            getSupportActionBar().setDisplayHomeAsUpEnabled(true);        }        final CollapsingToolbarLayout collapsingToolbar = findViewById(R.id.collapsingToolbar);        AppBarLayout appBarLayout = findViewById(R.id.app_bar);        appBarLayout.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener() {            boolean isShow = true;            int scrollRange = -1;            @Override            public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {                if (scrollRange == -1) {                    scrollRange = appBarLayout.getTotalScrollRange();                }                if (scrollRange + verticalOffset == 0) {                    collapsingToolbar.setTitle(tvShow.getTitle());                    isShow = true;                } else if (isShow) {                    collapsingToolbar.setTitle(" ");                    isShow = false;                }            }        });    }    private void initUI() {        tvShowPoster = findViewById(R.id.tvDetailsPoster);        tvShowTitle = findViewById(R.id.tvDetailsTitle);        tvShowGenres = findViewById(R.id.tvDetailsGenres);        tvShowOverview = findViewById(R.id.tvDetailsOverview);        tvShowReleaseDate = findViewById(R.id.tvDetailsReleaseDate);        tvShowRating = findViewById(R.id.tvDetailsRating);        tvShowTrailers = findViewById(R.id.tvTrailers);        tvShowSeasons = findViewById(R.id.tvSeasons);        tvShowCasts = findViewById(R.id.tvCast);        tvShowSimilar = findViewById(R.id.tvSimilar);        progressBar = findViewById(R.id.progressBar);        backgroundLoading = findViewById(R.id.background_loading);        appBarLayout = findViewById(R.id.app_bar);        constraintLayout = findViewById(R.id.constraint);        tvShowTrailerLabel = findViewById(R.id.trailersLabel);        tvShowCastLabel = findViewById(R.id.castLabel);        tvShowSimilarLabel = findViewById(R.id.similarLabel);        ratingText = findViewById(R.id.rating_text);        ratingVotes = findViewById(R.id.rating_count);        coordinatorLayout = findViewById(R.id.coordinator_layout);        sliderView = findViewById(R.id.imageSlider);    }    private void showLoading(Boolean state) {        if (state) {            progressBar.setVisibility(View.VISIBLE);            backgroundLoading.setVisibility(View.VISIBLE);            appBarLayout.setVisibility(View.GONE);            constraintLayout.setVisibility(View.GONE);        } else {            progressBar.setVisibility(View.GONE);            backgroundLoading.setVisibility(View.GONE);            appBarLayout.setVisibility(View.VISIBLE);            constraintLayout.setVisibility(View.VISIBLE);        }    }    private void setTvShow() {        this.tvShow = tvShowsViewModel.getTvShowItems(tvShowId).getValue();        if (tvShow == null) {            showError();        } else {            tvShowTitle.setText(tvShow.getTitle());            tvShowOverview.setText(tvShow.getOverview());            tvShowRating.setRating(tvShow.getRating() / 2);            ratingText.setText(String.valueOf(tvShow.getRating()));            ratingVotes.setText(String.format("(%s votes)", String.valueOf(tvShow.getRatingVotes())));            setTvShowReleaseDate(tvShow);            if (tvShow.getGenres() != null) {                ArrayList<String> currentGenres = new ArrayList<>();                for (Genre genre : tvShow.getGenres()) {                    currentGenres.add(genre.getName());                }                tvShowGenres.setText(TextUtils.join(", ", currentGenres));            }            Glide.with(this)                    .load(BuildConfig.TMDB_IMAGE_342 + tvShow.getPosterPath())                    .error(R.drawable.ic_broken_image)                    .placeholder(R.drawable.ic_image)                    .apply(RequestOptions.placeholderOf(R.color.colorPrimaryDark))                    .into(tvShowPoster);        }    }    private void setGenres() {        GenresResponse genresResponse = tvShowsViewModel.getGenres().getValue();        if (genresResponse != null && genresResponse.getGenres() == null) {            showError();        }    }    private void setTvShowReleaseDate(TvShow tvShow) {        if (tvShow.getReleaseDate() != null) {            String date = tvShow.getReleaseDate();            SimpleDateFormat input = new SimpleDateFormat("yyyy-MM-dd", Locale.US);            SimpleDateFormat output = new SimpleDateFormat("dd MMM yyyy", Locale.US);            try {                Date newDate = input.parse(date);                assert newDate != null;                tvShowReleaseDate.setText(output.format(newDate));            } catch (ParseException e) {                e.printStackTrace();            }        } else {            tvShowReleaseDate.setVisibility(View.GONE);        }    }    private void setTrailers() {        TrailerResponse trailerResponse = tvShowsViewModel.getTrailers(tvShowId).getValue();        tvShowTrailers.removeAllViews();        if (trailerResponse != null) {            if (trailerResponse.getTrailers().size() == 0) {                tvShowTrailerLabel.setVisibility(View.GONE);                tvShowTrailers.setVisibility(View.GONE);            } else {                for (final Trailer trailer : trailerResponse.getTrailers()) {                    View parent = getLayoutInflater().inflate(R.layout.thumbnail_trailer, tvShowTrailers, false);                    ImageView thumbnail = parent.findViewById(R.id.thumbnail_trailer);                    TextView tvTrailerTitle = parent.findViewById(R.id.trailerTitle);                    tvTrailerTitle.setText(trailer.getName());                    thumbnail.requestLayout();                    thumbnail.setOnClickListener(v -> showTrailer(String.format(BuildConfig.YOUTUBE_VIDEO_URL, trailer.getKey())));                    Glide.with(this)                            .load(String.format(BuildConfig.YOUTUBE_THUMBNAIL_URL, trailer.getKey()))                            .apply(RequestOptions.placeholderOf(R.color.colorPrimary).centerCrop())                            .into(thumbnail);                    tvShowTrailers.addView(parent);                }            }        } else {            showError();            tvShowTrailerLabel.setVisibility(View.GONE);            tvShowTrailers.setVisibility(View.GONE);        }    }    private void setSeasons() {        tvShowSeasons.removeAllViews();        for (final Season season : tvShow.getSeasons()) {            View parent = getLayoutInflater().inflate(R.layout.thumbnail_season, tvShowSeasons, false);            ImageView imageSeason = parent.findViewById(R.id.season_poster);            TextView seasonTitle = parent.findViewById(R.id.season_name);            seasonTitle.setText(season.getName());            imageSeason.requestLayout();            imageSeason.setOnClickListener(v -> {                Intent intent = new Intent(TvShowDetailActivity.this, SeasonsActivity.class);                intent.putExtra(SeasonsActivity.TV_SHOW_ID, tvShowId);                intent.putExtra(SeasonsActivity.SEASON_NUMBER, season.getSeasonNumber());                startActivity(intent);            });            Glide.with(this)                    .load(BuildConfig.TMDB_IMAGE_BASE_URL + season.getPosterPath())                    .apply(RequestOptions.placeholderOf(R.color.colorPrimary).centerCrop())                    .into(imageSeason);            tvShowSeasons.addView(parent);        }    }    private void setCasts() {        CreditsResponse creditsResponse = tvShowsViewModel.getCredits(tvShowId).getValue();        tvShowCasts.removeAllViews();        if (creditsResponse != null) {            if (creditsResponse.getCast().size() == 0) {                tvShowCastLabel.setVisibility(View.GONE);                tvShowCasts.setVisibility(View.GONE);            } else {                for (final Cast cast : creditsResponse.getCast()) {                    View parent = getLayoutInflater().inflate(R.layout.thumbnail_credits, tvShowCasts, false);                    ImageView thumbnailCast = parent.findViewById(R.id.thumbnail_cast);                    TextView castName = parent.findViewById(R.id.cast_name);                    TextView castCharacter = parent.findViewById(R.id.cast_character);                    castName.setText(cast.getName());                    castCharacter.setText(cast.getCharacter());                    Glide.with(this)                            .load(BuildConfig.TMDB_IMAGE_342 + cast.getProfilePath())                            .error(R.drawable.ic_action_user)                            .placeholder(R.drawable.ic_action_user)                            .into(thumbnailCast);                    thumbnailCast.requestLayout();                    tvShowCasts.addView(parent);                }            }        } else {            showError();            tvShowCastLabel.setVisibility(View.GONE);            tvShowCasts.setVisibility(View.GONE);        }    }    private void setSimilar() {        SimilarResponse similarResponse = tvShowsViewModel.getSimilar(tvShowId).getValue();        tvShowSimilar.removeAllViews();        if (similarResponse != null) {            if (similarResponse.getSimilar().size() == 0) {                tvShowSimilarLabel.setVisibility(View.GONE);                tvShowSimilar.setVisibility(View.GONE);            } else {                for (final Similar similar : similarResponse.getSimilar()) {                    View parent = getLayoutInflater().inflate(R.layout.thumbnail_similar, tvShowSimilar, false);                    ImageView thumbnailSimilar = parent.findViewById(R.id.thumbnail_similar);                    TextView tvSimilarTitle = parent.findViewById(R.id.similarMovieTitle);                    TextView tvSimilarRating = parent.findViewById(R.id.cv_movie_rating);                    tvSimilarTitle.setText(similar.getName());                    tvSimilarRating.setText(String.valueOf(similar.getRating()));                    thumbnailSimilar.requestLayout();                    thumbnailSimilar.setOnClickListener(v -> {                        Intent intent = new Intent(TvShowDetailActivity.this, TvShowDetailActivity.class);                        intent.putExtra(TvShowDetailActivity.TV_SHOW_ID, similar.getId());                        startActivity(intent);                    });                    Glide.with(this)                            .load(BuildConfig.TMDB_IMAGE_342 + similar.getPosterPath())                            .error(R.drawable.ic_broken_image)                            .placeholder(R.drawable.ic_image)                            .apply(RequestOptions.placeholderOf(R.color.colorPrimaryDark).centerCrop())                            .into(thumbnailSimilar);                    tvShowSimilar.addView(parent);                }            }        } else {            showError();            tvShowSimilarLabel.setVisibility(View.GONE);            tvShowSimilar.setVisibility(View.GONE);        }    }    private void showError() {        Toast.makeText(this, "Check your internet connection.", Toast.LENGTH_SHORT).show();    }    private void showTrailer(String url) {        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));        startActivity(intent);    }    @Override    public boolean onSupportNavigateUp() {        onBackPressed();        return true;    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.details_menu, menu);        super.onCreateOptionsMenu(menu);        return true;    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        if (favorite) {            menu.findItem(R.id.favorite).setIcon(R.drawable.ic_favorite);        } else {            menu.findItem(R.id.favorite).setIcon(R.drawable.ic_favorite_border);        }        super.onPrepareOptionsMenu(menu);        return true;    }    @Override    public boolean onOptionsItemSelected(@NonNull MenuItem item) {        if (item.getItemId() == R.id.favorite) {            if (favoritesViewModel.selectFavTv(tvShowId) == null) {                addFavorite(item);            } else {                deleteFavorite(item);            }        }        return super.onOptionsItemSelected(item);    }    private String msg;    private void addFavorite(final MenuItem item) {        favoritesViewModel.addFavoriteTvShow(tvShow);        favorite = true;        item.setIcon(R.drawable.ic_favorite);        msg = tvShow.getTitle() + " " + getString(R.string.add_favorite_tv);        Snackbar snackbar = Snackbar                .make(coordinatorLayout, msg, Snackbar.LENGTH_LONG)                .setAction(R.string.undo, view -> {                    deleteFavorite(item);                    msg = tvShow.getTitle() + " " + getString(R.string.delete_favorite_tv);                    Snackbar snackbarUndo = Snackbar.make(coordinatorLayout, msg, Snackbar.LENGTH_SHORT);                    snackbarUndo.setActionTextColor(getResources().getColor(R.color.colorAccent));                    snackbarUndo.show();                });        snackbar.setActionTextColor(getResources().getColor(R.color.colorAccent));        snackbar.show();    }    private void deleteFavorite(final MenuItem item) {        favoritesViewModel.deleteFavTv(tvShow);        favorite = false;        item.setIcon(R.drawable.ic_favorite_border);        msg = tvShow.getTitle() + " " + getString(R.string.delete_favorite_tv);        Snackbar snackbar = Snackbar                .make(coordinatorLayout, msg, Snackbar.LENGTH_LONG)                .setAction(R.string.undo, view -> {                    addFavorite(item);                    msg = tvShow.getTitle() + " " + getString(R.string.add_favorite_tv);                    Snackbar snackbarUndo = Snackbar.make(coordinatorLayout, msg, Snackbar.LENGTH_SHORT);                    snackbarUndo.setActionTextColor(getResources().getColor(R.color.colorAccent));                    snackbarUndo.show();                });        snackbar.setActionTextColor(getResources().getColor(R.color.colorAccent));        snackbar.show();    }}